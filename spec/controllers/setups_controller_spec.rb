# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe SetupsController, type: :controller do
  let(:admin) { FactoryGirl.create :admin }
  let(:user) { FactoryGirl.create :user }
  # This should return the minimal set of attributes required to create a valid
  # Setup. As you add validations to Setup, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { inicio: '2013-03-13 13:13:13 -0300',
      fim: '2013-03-14 13:13:13 -0300' }
  end

  let(:invalid_attributes) { { inicio: nil, fim: '2013-03-14 13:13:13 -0300' } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SetupsController. Be sure to keep this updated too.
  let(:admin_session) { sign_in admin }
  let(:user_session) { sign_in user }
  let(:guest_session) {}

  describe 'GET #index' do
    context 'when admin is logged in' do
      it 'returns a success response' do
        Setup.create! valid_attributes
        get :index, params: {}, session: admin_session
        expect(response).to be_successful
      end
    end
    context 'when user is logged in' do
      it 'returns a success response' do
        Setup.create! valid_attributes
        get :index, params: {}, session: user_session
        expect(response).to be_successful
      end
    end
    context 'when user is a guest' do
      it ' does not return a success response' do
        Setup.create! valid_attributes
        get :index, params: {}, session: guest_session
        expect(response).not_to be_successful
      end
    end
  end

  describe 'GET #show' do
    context 'when admin is logged in' do
      it 'returns a success response' do
        setup = Setup.create! valid_attributes
        get :show, params: { id: setup.to_param }, session: admin_session
        expect(response).to be_successful
      end
    end

    context 'when user is logged in' do
      it 'returns a success response' do
        setup = Setup.create! valid_attributes
        get :show, params: { id: setup.to_param }, session: user_session
        expect(response).to be_successful
      end
    end
    context 'when user is a guest' do
      it ' does not return a success response' do
        setup = Setup.create! valid_attributes
        get :show, params: { id: setup.to_param }, session: guest_session
        expect(response).not_to be_successful
      end
    end

  end

  describe 'GET #new' do
    context 'when admin is logged in' do
      it 'returns a success response' do
        get :new, params: {}, session: admin_session
        expect(response).to be_successful
      end
    end

    context 'when user is logged in' do
      it 'does not return a success response' do
        get :new, params: {}, session: user_session
        expect(response).not_to be_successful
      end
    end

    context 'when user is a guest' do
      it ' does not return a success response' do
        get :new, params: {}, session: guest_session
        expect(response).not_to be_successful
      end
    end
  end

  describe 'GET #edit' do
    context 'when admin is logged in'  do
      it 'returns a success response' do
        setup = Setup.create! valid_attributes
        get :edit, params: { id: setup.to_param }, session: admin_session
        expect(response).to be_successful
      end
    end

    context 'when user is logged in' do
      it ' does not return a success response' do
        setup = Setup.create! valid_attributes
        get :edit, params: { id: setup.to_param }, session: user_session
        expect(response).not_to be_successful
      end
    end

    context 'when user is a guest' do
      it 'it does not return a success response' do
        setup = Setup.create! valid_attributes
        get :edit, params: { id: setup.to_param }, session: guest_session
        expect(response).not_to be_successful
      end
    end
  end

  describe 'POST #create' do
    context 'when admin is logged in' do
      context 'with valid params' do
        it 'creates a new Setup' do
          expect do
            post :create, params: { setup: valid_attributes }, session: admin_session
          end.to change(Setup, :count).by(1)
        end

        it 'redirects to the created setup' do
          post :create, params: { setup: valid_attributes }, session: admin_session
          expect(response).to redirect_to(Setup.last)
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: { setup: invalid_attributes }, session: admin_session
          expect(response).to be_successful
        end
      end
    end

    context 'when user is logged in' do
      context 'with valid params' do
        it 'it does not create a new Setup' do
          expect do
            post :create, params: { setup: valid_attributes }, session: user_session
          end.to change(Setup, :count).by(0)
        end

        it 'it does not redirect to the created setup' do
          post :create, params: { setup: valid_attributes }, session: user_session
          expect(response).not_to redirect_to(Setup.last)
        end
      end

      context 'with invalid params' do
        it "it does not return a success response (i.e. to display the 'new' template)" do
          post :create, params: { setup: invalid_attributes }, session: user_session
          expect(response).not_to be_successful
        end
      end
    end

    context 'when user is a guest' do
      context 'with valid params' do
        it 'it does not create a new Setup' do
          expect do
            post :create, params: { setup: valid_attributes }, session: guest_session
          end.to change(Setup, :count).by(0)
        end

        it 'it does not redirect to the created setup' do
          post :create, params: { setup: valid_attributes }, session: guest_session
          expect(response).not_to redirect_to(Setup.last)
        end
      end

      context 'with invalid params' do
        it "it does not return a success response (i.e. to display the 'new' template)" do
          post :create, params: { setup: invalid_attributes }, session: guest_session
          expect(response).not_to be_successful
        end
      end
    end
  end

  describe 'PUT #update' do
    let(:new_attributes) do
      { inicio: '2015-05-15 15:15:15 -0300',
        fim: '2015-05-16 15:15:15 -0300' }
    end
    context 'when admin is logged in' do
      context 'with valid params' do
        it 'updates the requested setup' do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: new_attributes }, session: admin_session
          setup.reload
          expect(setup.inicio).to eq('2015-05-15 15:15:15 -0300')
          expect(setup.fim).to eq('2015-05-16 15:15:15 -0300')
        end

        it 'redirects to the setup' do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: valid_attributes }, session: admin_session
          expect(response).to redirect_to(setup)
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'edit' template)" do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: invalid_attributes }, session: admin_session
          expect(response).to be_successful
        end
      end
    end

    context 'when user is logged in' do
      context 'with valid params' do
        it 'it does not update the requested setup' do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: new_attributes }, session: user_session
          setup.reload
          expect(setup.inicio).not_to eq('2015-05-15 15:15:15 -0300')
          expect(setup.fim).not_to eq('2015-05-16 15:15:15 -0300')
        end

        it 'it does not redirect to the setup' do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: valid_attributes }, session: user_session
          expect(response).not_to redirect_to(setup)
        end
      end

      context 'with invalid params' do
        it "it does not return a success response (i.e. to display the 'edit' template)" do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: invalid_attributes }, session: user_session
          expect(response).not_to be_successful
        end
      end
    end

    context 'when user is a guest' do
      context 'with valid params' do
        it 'it does not update the requested setup' do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: new_attributes }, session: guest_session
          setup.reload
          expect(setup.inicio).not_to eq('2015-05-15 15:15:15 -0300')
          expect(setup.fim).not_to eq('2015-05-16 15:15:15 -0300')
        end

        it 'it does not redirect to the setup' do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: valid_attributes }, session: guest_session
          expect(response).not_to redirect_to(setup)
        end
      end

      context 'with invalid params' do
        it "it does not return a success response (i.e. to display the 'edit' template)" do
          setup = Setup.create! valid_attributes
          put :update, params: { id: setup.to_param, setup: invalid_attributes }, session: guest_session
          expect(response).not_to be_successful
        end
      end
    end
  end

  describe 'DELETE #destroy' do
    context 'when admin is logged in' do
      it 'destroys the requested setup' do
        setup = Setup.create! valid_attributes
        expect do
          delete :destroy, params: { id: setup.to_param }, session: admin_session
        end.to change(Setup, :count).by(-1)
      end

      it 'redirects to the setups list' do
        setup = Setup.create! valid_attributes
        delete :destroy, params: { id: setup.to_param }, session: admin_session
        expect(response).to redirect_to(setups_url)
      end
    end

    context 'when user is logged in' do
      it 'it does not destroy the requested setup' do
        setup = Setup.create! valid_attributes
        expect do
          delete :destroy, params: { id: setup.to_param }, session: user_session
        end.to change(Setup, :count).by(0)
      end

      it 'redirects to the setups list' do
        setup = Setup.create! valid_attributes
        delete :destroy, params: { id: setup.to_param }, session: user_session
        expect(response).to redirect_to(setups_url)
      end
    end

    context 'when user is a guest' do
      it 'it does not destroy the requested setup' do
        setup = Setup.create! valid_attributes
        expect do
          delete :destroy, params: { id: setup.to_param }, session: guest_session
        end.to change(Setup, :count).by(0)
      end

      it 'it does not redirect to the setups list' do
        setup = Setup.create! valid_attributes
        delete :destroy, params: { id: setup.to_param }, session: guest_session
        expect(response).not_to redirect_to(setups_url)
      end

    end
  end
end

